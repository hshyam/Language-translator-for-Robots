In this assignment, we fixed the inefficiencies in our code so that it runs more efficiently. We identified that the regex type declarations at the beginning of the scan function called makeRegex for each regex_t, each time scan was called. Also, we created a named regex_t pointer to each regex which made it more difficult to manage our pointers (we had to make a separate block of code to attempt to match the regex for each one). We proposed solutions to fix all these inefficiencies and now have a more accurate and efficient program. 

1. There is no duplication in the testing code written by us. However we did use  some code from WordCount and modified it to fit into iteration 1 to make it more efficient. If there was duplication in our code, it would be inefficient if we made a call to it elsewhere in the program.

2. Yes, it does. We were defining all of the regex types at the beginning of the scan function, so it was creating each regex each time it was called. This is inefficient as it takes time to create so many regular expressions each time, and it is pointless to recreate a variable that has previously been created without changing it at all. It has now been changed so that the regular expressions are defined once, above the scan function in scanner.cpp as global variables. 

3. No, we do not have any redundant array of tokenType values. Therefore, there is nothing to fix here. If we did have an array of tokenType, the data is useless because we already have the data in the list of enumerated type. It would lead to more duplication if we created it.

4. No, this isn't a problem in our code. It could have been, if we called any conditionals of the form if (tokenType == 0), but we never check tokenType that way, and throughout our code we refer to the token types by name rather than number, so even if their positions/numbers were switched, it would still work. Even after completing #5, as long as varName stays where it is, switching the order of the keywords should not affect how the code runs.

5. We did create a named regex_t pointer to each regex instead of putting them in an array. In order to fix it, we created a regex_t pointer array in the Scanner constructor. It's important to fix this because it makes it easier to manage our regex_t pointers: instead of having a separate check for each tokenType, we can simply check them in a loop.

6. Yes, we do use integer constant to refer to the array size, which in theory should be arbitrary. It's important to keep this arbitrary in case someone wants to change the array. We switched the for loop out for a while loop and made it check each regex_t until it ran out of regex_ts to check.

To fix our problems, we first made the regex_t pointers global variables rather than local ones to the scan function. This was a huge improvement since, once the test file had constructed the Scanner the first time, it didn't have to spend the time forming all the regular expressions each time the test file scanned a new string. Then, we put all the regex_t pointers in an array in the header file. This makes it more accessible to other programs that create Scanner objects, and allows us to call matchRegex in a loop rather than creating a block of code for each regex_t. And finally, we created a while loop to do just that, so that we could loop through the array without knowing the size, which again, makes it more adaptable in case someone wants to change the array up slightly.
